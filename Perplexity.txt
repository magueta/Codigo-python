Perplexity:

# Automatización de Búsqueda y Descarga de Adjuntos en Correos de Hotmail con Python

La automatización de la gestión de correos electrónicos representa una solución eficiente para quienes manejan grandes volúmenes de información. Este informe presenta el desarrollo de un programa en Python que permite automatizar la búsqueda y descarga de archivos adjuntos desde cuentas de Hotmail, utilizando las bibliotecas estándar de Python y los protocolos de conexión IMAP/SMTP.

## Fundamentos de la Conexión a Hotmail

Para acceder a una cuenta de correo Hotmail desde Python, es necesario comprender los protocolos de comunicación subyacentes y la configuración específica que requieren los servidores de Microsoft.

### Protocolos IMAP y SMTP para Hotmail

Hotmail (ahora parte de Outlook.com) soporta el protocolo IMAP (Internet Message Access Protocol), lo que permite acceder a los correos electrónicos desde aplicaciones externas sin necesidad de utilizar la interfaz web[1]. IMAP mantiene los mensajes en el servidor, permitiendo sincronización entre múltiples dispositivos, mientras que SMTP (Simple Mail Transfer Protocol) se utiliza para el envío de correos.

Para conectarse a Hotmail mediante IMAP, se requieren los siguientes parámetros de configuración:

| Parámetro | Valor |
|-----------|-------|
| Servidor IMAP | imap-mail.outlook.com |
| Puerto IMAP | 993 |
| Seguridad IMAP | SSL |
| Servidor SMTP | smtp-mail.outlook.com |
| Puerto SMTP | 587 |
| Seguridad SMTP | TLS |

Esta configuración es fundamental para establecer la conexión desde Python hacia los servidores de Microsoft[1].

### Diferencias entre IMAP y POP3

Aunque Hotmail también soporta POP3, para nuestra aplicación de automatización utilizaremos IMAP debido a sus ventajas significativas:

- IMAP mantiene los correos en el servidor, permitiendo accederlos desde diferentes dispositivos sin perder información.
- Facilita la sincronización del estado de los mensajes (leídos/no leídos) entre dispositivos.
- Permite operar con la estructura de carpetas completa del buzón.
- Resulta ideal para aplicaciones que necesitan monitorear correos sin eliminarlos del servidor[4].

## Desarrollo del Programa en Python

El programa que desarrollaremos utilizará principalmente las bibliotecas `imaplib`, `email`, `datetime` y `os` para manejar la conexión, procesamiento y almacenamiento de los adjuntos.

### Conexión y Autenticación a Hotmail

La primera fase implica establecer la conexión segura con el servidor IMAP de Hotmail y realizar la autenticación:

```python
import imaplib
import email
import datetime
import os
from email.header import decode_header

def conectar_hotmail(usuario, contraseña):
    """Establece conexión con el servidor IMAP de Hotmail/Outlook"""
    try:
        # Establece conexión con el servidor IMAP de Hotmail
        mail = imaplib.IMAP4_SSL("imap-mail.outlook.com", 993)
        # Autenticación con usuario y contraseña
        mail.login(usuario, contraseña)
        print(f"Conexión exitosa a la cuenta {usuario}")
        return mail
    except Exception as e:
        print(f"Error de conexión: {e}")
        return None
```

Este código crea una conexión segura SSL con el servidor IMAP de Hotmail/Outlook utilizando los parámetros obtenidos de las fuentes consultadas[1][2][3].

### Búsqueda de Correos Electrónicos

Para la búsqueda de correos, implementamos una función que permite filtrar mensajes según diversos criterios como fecha, remitente o asunto:

```python
def buscar_correos(mail, carpeta="INBOX", desde=None, asunto=None, 
                   desde_fecha=None, no_leidos=False):
    """Busca correos en la carpeta especificada según los criterios dados"""
    try:
        # Selecciona la carpeta
        mail.select(carpeta)
        
        criterios = []
        
        # Aplica filtro por no leídos
        if no_leidos:
            criterios.append('UNSEEN')
            
        # Filtro por remitente
        if desde:
            criterios.append(f'FROM "{desde}"')
            
        # Filtro por asunto
        if asunto:
            criterios.append(f'SUBJECT "{asunto}"')
            
        # Filtro por fecha
        if desde_fecha:
            date_str = desde_fecha.strftime("%d-%b-%Y")
            criterios.append(f'SINCE "{date_str}"')
        
        # Construye la consulta de búsqueda
        busqueda = ' '.join(criterios) if criterios else 'ALL'
        
        # Realiza la búsqueda
        status, data = mail.search(None, busqueda)
        
        if status != 'OK':
            print("Error al buscar correos")
            return []
            
        # Retorna las IDs de los correos encontrados
        return data[0].split()
        
    except Exception as e:
        print(f"Error durante la búsqueda: {e}")
        return []
```

Esta función permite construir consultas de búsqueda dinámicas basadas en los criterios proporcionados, utilizando los comandos IMAP estándar[6].

### Descarga de Adjuntos

Una vez identificados los correos relevantes, necesitamos procesar cada uno para extraer los archivos adjuntos:

```python
def descargar_adjuntos(mail, id_correo, directorio_destino):
    """Descarga todos los adjuntos de un correo específico"""
    try:
        # Crea el directorio de destino si no existe
        if not os.path.isdir(directorio_destino):
            os.makedirs(directorio_destino)
            
        # Obtiene el correo completo
        status, datos = mail.fetch(id_correo, '(RFC822)')
        
        # Parsea el correo
        mensaje = email.message_from_bytes(datos[0][1])
        
        # Obtiene información del correo
        asunto = decode_header(mensaje["Subject"])[0][0]
        if isinstance(asunto, bytes):
            asunto = asunto.decode()
            
        # Procesa las partes del correo
        archivos_descargados = []
        
        for parte in mensaje.walk():
            # Si la parte no es un adjunto, continuar con la siguiente
            if parte.get_content_maintype() == 'multipart':
                continue
                
            # Si la parte no tiene nombre de archivo, continuar con la siguiente
            nombre_archivo = parte.get_filename()
            if nombre_archivo is None:
                continue
                
            # Decodifica el nombre del archivo si es necesario
            if isinstance(nombre_archivo, bytes):
                nombre_archivo = nombre_archivo.decode()
                
            # Limpia el nombre del archivo
            nombre_archivo = nombre_archivo.replace(" ", "_")
            
            # Ruta completa para guardar el archivo
            ruta_completa = os.path.join(directorio_destino, nombre_archivo)
            
            # Guarda el adjunto
            with open(ruta_completa, 'wb') as f:
                f.write(parte.get_payload(decode=True))
                
            archivos_descargados.append(ruta_completa)
            
        return archivos_descargados
            
    except Exception as e:
        print(f"Error al descargar adjuntos: {e}")
        return []
```

Esta función procesa cada parte del correo, identificando y guardando los archivos adjuntos en el directorio especificado[5].

### Programa Principal

Finalmente, combinamos todas las funciones anteriores en un programa principal que orquesta el proceso completo:

```python
def main():
    """Función principal del programa"""
    # Configuración
    usuario = "tu_email@hotmail.com"
    contraseña = "tu_contraseña"
    directorio_destino = "C:/Descargas/Adjuntos"
    
    # Filtros de búsqueda (personalizar según necesidades)
    desde_fecha = datetime.date.today() - datetime.timedelta(days=7)  # Último 7 días
    desde_email = "remitente@ejemplo.com"  # None para no filtrar
    asunto_filtro = "Informe"  # None para no filtrar
    solo_no_leidos = True
    carpeta = "INBOX"  # Otras opciones: "Sent", "Junk", etc.
    
    # Conectar a la cuenta
    mail = conectar_hotmail(usuario, contraseña)
    if not mail:
        return
    
    try:
        # Buscar correos según criterios
        print(f"Buscando correos en {carpeta}...")
        ids_correos = buscar_correos(
            mail, 
            carpeta=carpeta,
            desde=desde_email, 
            asunto=asunto_filtro,
            desde_fecha=desde_fecha, 
            no_leidos=solo_no_leidos
        )
        
        print(f"Se encontraron {len(ids_correos)} correos.")
        
        # Procesar cada correo encontrado
        total_adjuntos = 0
        for id_correo in ids_correos:
            adjuntos = descargar_adjuntos(mail, id_correo, directorio_destino)
            if adjuntos:
                print(f"Correo ID {id_correo.decode()}: {len(adjuntos)} adjuntos descargados.")
                total_adjuntos += len(adjuntos)
        
        print(f"Proceso completado. Total de adjuntos descargados: {total_adjuntos}")
        
        # Cerrar conexión
        mail.logout()
        
    except Exception as e:
        print(f"Error en la ejecución del programa: {e}")
        mail.logout()

if __name__ == "__main__":
    main()
```

## Mejoras y Personalizaciones

El programa base presentado puede personalizarse y mejorarse de varias maneras según las necesidades específicas:

### Implementación de Filtros Avanzados

Podemos implementar filtros más sofisticados utilizando los criterios de búsqueda IMAP:

```python
def busqueda_avanzada(mail, carpeta="INBOX"):
    """Ejemplo de búsqueda avanzada con múltiples criterios"""
    mail.select(carpeta)
    
    # Buscar correos con adjuntos, no leídos, de la última semana
    fecha = (datetime.date.today() - datetime.timedelta(days=7)).strftime("%d-%b-%Y")
    status, data = mail.search(None, '(UNSEEN)', '(SINCE "{}")'.format(fecha), 'HAS ATTACHMENT')
    
    return data[0].split()
```

Esta función permite utilizar criterios combinados como "HAS ATTACHMENT" para encontrar específicamente correos con archivos adjuntos[6].

### Procesamiento Automatizado Periódico

Para una verdadera automatización, podemos implementar un sistema que revise periódicamente los correos nuevos:

```python
import time

def monitoreo_continuo(intervalo_minutos=30):
    """Monitorea continuamente la bandeja de entrada cada X minutos"""
    while True:
        print(f"Iniciando revisión a las {datetime.datetime.now().strftime('%H:%M:%S')}")
        main()  # Ejecuta el programa principal
        print(f"Próxima revisión en {intervalo_minutos} minutos")
        time.sleep(intervalo_minutos * 60)  # Espera en segundos
```

Esta función permite implementar un sistema que verifique periódicamente los nuevos correos y procese los adjuntos automáticamente.

### Manejo de Excepciones y Reintentos

Para aumentar la robustez del programa, podemos mejorar el manejo de errores y añadir reintentos:

```python
def conectar_con_reintento(usuario, contraseña, max_intentos=3):
    """Intenta conectarse varias veces ante fallos temporales"""
    for intento in range(1, max_intentos + 1):
        try:
            mail = imaplib.IMAP4_SSL("imap-mail.outlook.com", 993)
            mail.login(usuario, contraseña)
            return mail
        except imaplib.IMAP4.error as e:
            print(f"Intento {intento}/{max_intentos} fallido: {e}")
            if intento < max_intentos:
                time.sleep(5)  # Espera antes de reintentar
    
    print("No se pudo establecer conexión después de varios intentos")
    return None
```

## Consideraciones de Seguridad

Es importante considerar algunas prácticas de seguridad al implementar este tipo de programas:

1. **Almacenamiento seguro de credenciales**: Evitar incluir contraseñas directamente en el código fuente. Considerar el uso de variables de entorno o almacenamiento seguro de credenciales.

2. **Verificación SSL**: Asegurarse de que la conexión IMAP utilice SSL para proteger las credenciales en tránsito[1].

3. **Permisos de archivos**: Gestionar adecuadamente los permisos de los archivos descargados para evitar accesos no autorizados.

```python
# Ejemplo de carga de credenciales desde variables de entorno
import os

usuario = os.environ.get('EMAIL_USER')
contraseña = os.environ.get('EMAIL_PASSWORD')

if not usuario or not contraseña:
    print("Error: Las credenciales no están configuradas en las variables de entorno")
    exit(1)
```

## Conclusión

La automatización de la búsqueda y descarga de adjuntos de correos electrónicos en Hotmail utilizando Python proporciona una solución eficiente para gestionar grandes volúmenes de información. A través del uso de las bibliotecas estándar como `imaplib` y `email`, hemos desarrollado un programa modular y personalizable.

Este sistema puede adaptarse fácilmente a diferentes requisitos de búsqueda y procesamiento, ahorrando tiempo considerable en tareas repetitivas. Las capacidades de filtrado por remitente, asunto, fecha y estado de lectura permiten una gran flexibilidad para adaptarse a diversos casos de uso.

Para implementaciones en entornos de producción, se recomienda considerar aspectos adicionales como el monitoreo del rendimiento, la gestión segura de credenciales y la integración con sistemas de notificación o procesamiento posterior de los archivos descargados.

Citations:
[1] https://www.getmailbird.com/setup/es/access-hotmail-com-via-imap-smtp
[2] https://github.com/amarrforever/Outlook-python
[3] https://github.com/sssolammm/ValidateHotmailEmail
[4] https://www.synergyweb.es/blog/como-configurar-una-cuenta-de-correo-en-outlook/
[5] https://stackoverflow.com/questions/6225763/downloading-multiple-attachments-using-imaplib
[6] https://coderwall.com/p/gorteg/python-s-imaplib
[7] https://www.youtube.com/watch?v=UF-hc2nZV_A
[8] https://learn.microsoft.com/en-us/answers/questions/2103970/how-to-read-email-attachments-using-ms-graph-api
[9] https://learn.microsoft.com/en-sg/answers/questions/2103970/how-to-read-email-attachments-using-ms-graph-api
[10] https://stackoverflow.com/questions/73902642/office-365-imap-authentication-via-oauth2-and-python-msal-library
[11] https://support.microsoft.com/es-es/office/configuraci%C3%B3n-pop-imap-y-smtp-para-outlook-com-d088b986-291d-42b8-9564-9c414e2aa040
[12] https://gist.github.com/kngeno/5337e543eb72174a6ac95e028b3b6456
[13] https://learn.microsoft.com/en-us/exchange/client-developer/legacy-protocols/how-to-authenticate-an-imap-pop-smtp-application-by-using-oauth
[14] https://support.microsoft.com/pt-br/office/configura%C3%A7%C3%B5es-pop-imap-e-smtp-para-outlook-com-d088b986-291d-42b8-9564-9c414e2aa040
[15] https://dev.to/shadow_b/download-email-attachments-using-python-3lji
[16] https://support.microsoft.com/pt-pt/office/defini%C3%A7%C3%B5es-de-pop-imap-e-smtp-do-outlook-com-d088b986-291d-42b8-9564-9c414e2aa040
[17] https://github.com/jamesridgway/attachment-downloader
[18] https://www.youtube.com/watch?v=TK5cuH5TInE
[19] https://iditect.com/faq/python/downloading-multiple-attachments-using-imaplib.html
[20] https://support.microsoft.com/es-es/topic/configuraci%C3%B3n-b%C3%A1sica-de-una-cuenta-imap-0a3f843d-d858-4527-ba0c-b57aeb83bf4e
[21] https://thepythoncode.com/article/reading-emails-in-python
[22] https://blog.bounceless.io/checking-emails-with-python-a-comprehensive-guide/
[23] https://www.youtube.com/watch?v=8Ssk2Jcmz0k
[24] https://stackoverflow.com/questions/66111888/python-graph-api-request-only-retrieving-1-attachment-from-an-email
[25] https://www.youtube.com/watch?v=K3gqVvM3F_U
[26] https://answers.microsoft.com/en-us/outlook_com/forum/all/connect-to-email-using-oauth-20/c42f71eb-0129-43d6-9fd7-f61cc4570012
[27] https://github.com/mbroton/pyioga
[28] https://msal-python.readthedocs.io/en/mi/
[29] https://github.com/alexgartrell/mailpy
[30] https://www.reddit.com/r/pythonhelp/comments/198ew98/ms_graph_api_sending_email_attachments/
[31] https://learn.microsoft.com/en-us/graph/api/message-post-attachments?view=graph-rest-1.0
[32] https://github.com/microsoftgraph/msgraph-sdk-python/pull/110
[33] https://www.youtube.com/watch?v=aYf31kSKvd0
[34] https://www.aipsolutions.tech/the-ultimate-guide-to-performance-testing/
[35] https://github.com/Azure-Samples/ms-identity-python-desktop/blob/master/1-Call-MsGraph-WithUsernamePassword/README.md
[36] https://stackoverflow.com/questions/70171827/how-to-download-mail-attachment-through-script
[37] https://learn.microsoft.com/en-us/answers/questions/1191591/imap-authenticate-error-in-python
[38] https://zato.io/en/blog/imap-oauth2-microsoft365.html
[39] https://pythonhelpdesk.com/2024/02/25/problem-with-microsoft-365-oauth2-authentication-failure-in-python-imap/
[40] https://github.com/aler9/howto-gmail-imap-oauth2
[41] https://stackoverflow.com/questions/74251788/python-read-outlook-emails-with-oauth2
[42] https://blog.csdn.net/asd123_1_/article/details/111225508
[43] https://learn.microsoft.com/en-us/exchange/client-developer/legacy-protocols/how-to-authenticate-an-imap-pop-smtp-application-by-using-oauth
[44] https://www.tempmail.us.com/pt/python-msal/acesso-de-e-mail-do-outlook-python-3-x-via-imap
[45] https://www.tempmail.us.com/en/python-msal/python-3-x-outlook-email-access-via-imap
[46] https://www.tutorialspoint.com/python_network_programming/python_imap.htm
[47] https://www.cnblogs.com/Gimm/p/18742667
[48] https://learn.microsoft.com/en-us/answers/questions/1781340/imap-authentication-of-a-registered-app-fails-with

---
Respuesta de Perplexity: pplx.ai/share
